package contacts;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static List<Contact> contactList = new ArrayList<>();

    public static void main(String[] args) {
        ContactManager manager = new ContactManager();
        manager.ManageContacts();

    }
}

interface ContactFactory {
    Contact createContact();
}

class PersonFactory implements ContactFactory {

    @Override
    public Contact createContact() {   // changed to subclass
        PersonDetailsFactory detailsFactory = new PersonDetailsFactory();

        return new Person(detailsFactory);
    }
}

class OrganizationFactory implements ContactFactory {

    @Override
    public Contact createContact() {   //ContactDetailsFactory changed to OrganizationDetailsFactory
        OrganizationDetailsFactory detailsFactory = new OrganizationDetailsFactory();

        return new Organization(detailsFactory);
    }
}

interface ContactDetailsFactory {

    Number createNumber();
    String createName();
    String createOrgAddress();
    String createTimeCreated();
    String createTimeUpdated();
}

class PersonDetailsFactory implements ContactDetailsFactory {

    Scanner in = new Scanner(System.in);

    public String createTimeCreated() {   // method add date of creation of contact
        LocalDateTime timeCreated = LocalDateTime.now().withNano(0).withSecond(0);
        return timeCreated.toString();
    }

    @Override
    public String createTimeUpdated() {
        LocalDateTime timeUpd = LocalDateTime.now().withNano(0).withSecond(0);
        return timeUpd.toString();
    }

    public String createGender() {
        System.out.print("Enter the gender (M, F): ");
        String gender = in.nextLine();
        if (gender.isEmpty()) {          // here will be method to check valid gender
            System.out.println("Bad gender!");
        }
        return gender.isEmpty() ? "[no data]" : gender;  // enter name from console
    }

    public String createBirth() {
        System.out.print("Enter the birth date: ");
        String birth = in.nextLine();
        if (birth.isEmpty()) {          // here will be method to check valid birthdate
            System.out.println("Bad birth date!");
        }
        return birth.isEmpty() ? "[no data]" : birth;  // enter name from console
    }

    @Override
    public Number createNumber() {
        return new NumberPerson(); // dialog in class constructor
    }

    public String createName() {
        System.out.print("Enter the name: ");
        return in.nextLine();  // enter name from console
    }

    public String createSurname() {
        System.out.print("Enter the surname: ");
        return in.nextLine();  // enter surname from console
    }

    @Override   // later to fix it
    public String createOrgAddress() {
        return null;
    }
}

class OrganizationDetailsFactory implements ContactDetailsFactory {
    Scanner in = new Scanner(System.in);

    @Override
    public Number createNumber() {
        return new NumberOrganization(); // dialog in class constructor
    }

    public String createName() {
        System.out.print("Enter the organization name: ");
        return in.nextLine();  // enter name from console
    }

    public String createOrgAddress() {
        System.out.print("Enter the address: ");
        return in.nextLine();  // enter address from console
    }

    public String createTimeCreated() {   // method add date of creation of contact
        LocalDateTime timeCreated = LocalDateTime.now().withSecond(0).withNano(0);
        return timeCreated.toString();
    }

    @Override
    public String createTimeUpdated() {
        LocalDateTime timeUpd = LocalDateTime.now().withSecond(0).withNano(0);
        return timeUpd.toString();
    }
}

abstract class Contact {

    final boolean isPerson = false;  // One of the solutions is to create a final Boolean field isPerson in the base class.
    Number number;

    abstract String getDescription();
    abstract String getTitle();

    @Override
    public String toString() {
        return "Number: " + number + "\n";
    }
}

class Person extends Contact {
    Scanner in = new Scanner(System.in);
    private String name;
    private String surname;
    private  String birth;
    private  String gender;
    private  String timeCreated;
    String timeUpd;
    Person(PersonDetailsFactory detailsFactory) {
        super();
        name = detailsFactory.createName();
        surname = detailsFactory.createSurname();
        birth = detailsFactory.createBirth();
        gender = detailsFactory.createGender();
        number = detailsFactory.createNumber();
        timeCreated = detailsFactory.createTimeCreated();
        timeUpd = detailsFactory.createTimeUpdated(); // there is no update
    }

    public String updateName() {
        System.out.print("Enter the name: ");
        return this.name = in.nextLine();
    }
    public String updateSurname() {
        System.out.print("Enter the surname: ");
        return this.surname = in.nextLine();
    }

    public String updateBirth() {
        System.out.print("Enter the birth date: ");
        return this.birth = in.nextLine();
    }

    public String updateGender() {
        System.out.print("Enter the gender (M, F): ");
        return this.gender = in.nextLine();
    }

    void updateNumber() {
        System.out.print("Enter the number: ");
        this.number = new NumberPerson();
    }

    @Override
    public String getDescription() {
        return  "Name: " + name + "\n" +
                "Surname: " + surname + "\n" +
                "Birth date: " + birth + "\n" +
                "Gender: " + gender + "\n" +
                super.toString() +  // number
                "Time created: " + timeCreated + "\n" +
                "Time last edit: " + timeUpd + "\n";   // <-- changing when edited
    }

    @Override
    String getTitle() {
        return name + " " + surname;
    }
}
class Organization extends Contact {

    private final String orgName;
    private String orgAddress;
    private final String timeCreated;
    String timeUpd;
    Scanner in = new Scanner(System.in);

    Organization(ContactDetailsFactory detailsFactory) {
        super();
        orgName = detailsFactory.createName();
        orgAddress = detailsFactory.createOrgAddress();
        number = detailsFactory.createNumber();
        timeCreated = detailsFactory.createTimeCreated();
        timeUpd = detailsFactory.createTimeUpdated() ;  // not updated in creation

    }

    public Number updateNumber() {
        System.out.print("Enter the number: ");
        return number = new NumberOrganization();
    }

    void updateAddress() {
        System.out.print("Enter the address: ");
        this.orgAddress = in.nextLine();
    }

    @Override
    public String getDescription() {
        return "This is a Organization: \n" +
                "Organization name: " + orgName +"\n" +
                "Address: "+ orgAddress + "\n" +
                super.toString() +  // number
                "Time created: "+ timeCreated + "\n" +
                "Time last edit: " + timeUpd+ "\n";    //<-- change time when upd
    }

    @Override
    String getTitle() {
        return orgName;
    }
}

interface Number {
    String toString();
}

class NumberPerson implements Number {
    Scanner in = new Scanner(System.in);
    String number;
    NumberPerson() {
        System.out.print("Enter the number: ");
        this.number = in.nextLine();
    }
    @Override
    public String toString() {
        return number;  //Person number:
    }
}

class NumberOrganization implements Number {
    Scanner in = new Scanner(System.in);
    String number;
    NumberOrganization() {
        System.out.print("Enter the number: ");
        this.number = in.nextLine();
    }

    @Override
    public String toString() {
        return  number;
    }
}

class ContactManager {
    Scanner in = new Scanner(System.in);

    public void ManageContacts( ) { // Contact manager
        Contact contact;
        List<Contact> contactsList = Main.contactList;

        ContactFactory personFactory = new PersonFactory();
        OrganizationFactory organizationFactory = new OrganizationFactory(); /* write your code here */

        int numOfrecords = 0;
        String command = "";

        while (!command.equals("exit")) {
            System.out.println();
            System.out.print("Enter action (add, remove, edit, count, info, exit): ");

            command = in.nextLine();
            switch (command) {
                case "add":
                    System.out.print("Enter the type (person, organization): ");
                    if (in.nextLine().equals("person")) {
                        contact = personFactory.createContact();
                        contactsList.add(contact);
                    } else {
                        contact = organizationFactory.createContact(); /* write your code here */
                        contactsList.add(contact);
                    }
                    numOfrecords++;
                    System.out.println("The record added. \n");

                    //String number = isValidNumber(in.nextLine());
                    break;

                case "remove":
                    if (numOfrecords == 0) {

                        System.out.println("No records to remove!\n");
                    } else {
                        // get list
                        int cnt = 1;
                        for (Contact value : contactsList) {
                            System.out.println(cnt + ". " + value.getTitle());
                            cnt++;
                        }
                        System.out.print("Select a record: ");
                        int numToRem = in.nextInt() - 1; // star to remove in list step by step

                        contactsList.remove(numToRem);
                        numOfrecords--;
                        System.out.println("The record removed!\n");
                        in.nextLine();
                    }
                    break;

                case "edit":
                    if (numOfrecords == 0) {
                        System.out.println("No records to edit!");
                    } else {
                        int cnt = 1;
                        for (Contact value : contactsList) {
                            System.out.println(cnt + ". " + value.getTitle());
                            cnt++;
                        }
                        System.out.print("Select a record: ");
                        int lineToEdit = in.nextInt() - 1; // line to edit
                        if (contactsList.get(lineToEdit) instanceof Person) {     // edit Person
                            System.out.print("Select a field (name, surname, birth, gender, number): ");
                            String fieldName = in.next();
                            if (fieldName.equals("name")) {  // edit name
                                ((Person) contactsList.get(lineToEdit)).updateName();
                            }
                            if (fieldName.equals("surname")) {  // edit surname
                                ((Person) contactsList.get(lineToEdit)).updateSurname();
                            }
                            if (fieldName.equals("birth")) {  // edit birth
                                ((Person) contactsList.get(lineToEdit)).updateBirth();
                            }
                            if (fieldName.equals("gender")) {  // edit gender
                                ((Person) contactsList.get(lineToEdit)).updateGender();
                            }
                            if (fieldName.equals("number")) {  // edit number
                                ((Person) contactsList.get(lineToEdit)).updateNumber();
                            }

                            LocalDateTime now = LocalDateTime.now().withNano(0).withSecond(0);  // set upd time
                            ((Person) contactsList.get(lineToEdit)).timeUpd = now.toString();

                        } else {
                            System.out.println("Select a field (address, number): ");  // edit Organization
                            String fieldName = in.next();
                            if (fieldName.equals("number")) {
                                ((Organization) contactsList.get(lineToEdit)).updateNumber();  // edit number
                            }
                            if (fieldName.equals("address")) {
                                ((Organization) contactsList.get(lineToEdit)).updateAddress();   // edit address
                            }
                            LocalDateTime now = LocalDateTime.now().withNano(0).withSecond(0);  // set upd time
                            ((Organization) contactsList.get(lineToEdit)).timeUpd = now.toString();
                        }

                        System.out.println();
                        in.nextLine();   // fix double sout
                    }
                    break;

                case "count":
                    System.out.printf("The Phone Book has %d records.\n\n", numOfrecords);
                    break;

                case "info":
                    if (numOfrecords == 0) {
                        System.out.println("No records\n");
                    } else {
                        int cnt = 1;
                        for (Contact value : contactsList) {
                            System.out.println(cnt + ". " + value.getTitle());
                            cnt++;
                        }
                        System.out.print("Select a record: ");
                        int record = in.nextInt() - 1;
                        System.out.println(contactsList.get(record).getDescription());
                    }
                    in.nextLine();  // fix double sout
                    break;
            }
        }
    }

    // method check and return valid number or ""
    private String isValidNumber (String number) {

        String numberFormatFilter = "\\+?(\\([0-9a-zA-Z]+\\)|[0-9a-zA-Z]+([ -][(][0-9a-zA-Z]{2,}[)])?)([ -][0-9a-zA-Z]{2,})*";
        Pattern pattern = Pattern.compile(numberFormatFilter);

        Matcher matcher = pattern.matcher(number);
        if (!matcher.matches()) System.out.println("Wrong number format!");
        return matcher.matches() ? number : "[no number]";
    }
}
