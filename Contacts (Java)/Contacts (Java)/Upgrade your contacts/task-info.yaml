type: edu
files:
  - name: src/contacts/Main.java
    visible: true
    text: |-
      package contacts;
      
      import java.util.Scanner;
      import java.util.ArrayList;
      import java.util.List;
      
      public class Main {
          public static void main(String[] args) {
              try (Scanner scanner = new Scanner(System.in)) {
                  ContactsManagement contactManagement = new ContactsManagement();
      
                  while(true) {
                      final String STARTING_MSG = "Enter action (add, remove, edit, count, list, exit)";
                      System.out.println(STARTING_MSG);
                      String select = scanner.nextLine();
      
                      switch (select.toLowerCase()) {
                          case "add":
                              String PROMPT_NAME = "Enter the name of the person:";
                              String PROMPT_SURNAME = "Enter the surname of the person:";
                              String PROMPT_PHONE_NUMBER = "Enter the number:";
                              System.out.println(PROMPT_NAME);
                              String name = scanner.nextLine();
                              System.out.println(PROMPT_SURNAME);
                              String surname = scanner.nextLine();
                              System.out.println(PROMPT_PHONE_NUMBER);
                              String phoneNumber = scanner.nextLine();
                              Contact contact = new Contact(name, surname);
                              contact.setPhoneNumber(phoneNumber);
                              contactManagement.addContact(contact);
                              System.out.println("The record added.");
                              break;
                          case "remove":
                              contactManagement.removeContact();
                              break;
                          case "edit":
                              if (contactManagement.count() == 0) {
                                  final String EMPTY_CONTACT_MSG = "No records to edit!";
                                  System.out.println(EMPTY_CONTACT_MSG);
                              } else {
                                  contactManagement.editContact();
                              }
                              break;
                          case "count":
                              String COUNT_MSG = "The Phone Book has %s records.".formatted(contactManagement.count());
                              System.out.println(COUNT_MSG);
                              break;
                          case "list":
                              contactManagement.list();
                              break;
                          case "exit":
                              contactManagement.exit();
                              break;
                          default:
                              System.out.println("default");
                              break;
                      }
                  }
              }
          }
      
          static class Contact {
              private String name;
              private String surname;
              private String phoneNumber;
      
              public Contact(String name, String surname) {
                  this.name = name;
                  this.surname = surname;
                  this.phoneNumber = "";
              }
      
              public String getName() {
                  return this.name;
              }
      
              public void setName(String name) {
                  this.name = name;
              }
      
              public String getSurname() {
                  return this.surname;
              }
      
              public void setSurname(String surname) {
                  this.surname = surname;
              }
      
              public String getPhoneNumber() {
                  return this.phoneNumber;
              }
      
              public void setPhoneNumber(String phoneNumber) {
                  if (isValidPhoneNumber(phoneNumber))
                      this.phoneNumber = phoneNumber;
                  else {
                      this.phoneNumber = "";
                      System.out.println("Wrong number format!");
                  }
              }
      
              private boolean isValidPhoneNumber(String phoneNumber) {
                  //String pattern = "\\d{10}|(?:\\d{3}-){2}\\d{4}|\\(\\d{3}\\)\\d{3}-?\\d{4}";
                  String pattern = "^\\+?(\\(\\w+\\)|\\w+[ -]\\(\\w{2,}\\)|\\w+)([ -]\\w{2,})*";
                  return phoneNumber.matches(pattern);
              }
      
              public boolean hasNumber() {
                  return !"".equalsIgnoreCase(this.phoneNumber);
              }
          }
      
          static class ContactsManagement {
              private List<Contact> contacts;
      
              public ContactsManagement() {
                  this.contacts = new ArrayList<>();
              }
      
              public void addContact(Contact contact) {
                  this.contacts.add(contact);
              }
      
              public void removeContact() {
                  if (this.contacts.size() == 0) {
                      System.out.println("No records to remove!");
                      return;
                  }
                  this.list();
                  System.out.println("Select a record:");
                  Scanner scanner1 = new Scanner(System.in);
                  int index = scanner1.nextInt();
                  this.contacts.remove(index - 1);
      
              }
      
              public void editContact() {
                  this.list();
                  System.out.println("Select a record:");
                  Scanner scanner1 = new Scanner(System.in);
                  Scanner scanner2 = new Scanner(System.in);
                  int index = scanner1.nextInt();
                  Contact contact = this.contacts.get(index - 1);
                  System.out.println("Select a field (name, surname, number):");
                  String selectField = scanner2.nextLine();
                  switch (selectField.toLowerCase()) {
                      case "name":
                          String name = scanner2.nextLine();
                          if (!"".equals(name))
                              contact.setName(name);
                          break;
                      case "surname":
                          String surname = scanner2.nextLine();
                          if (!"".equals(surname))
                              contact.setSurname(surname);
                          break;
                      case "number":
                          String phoneNumber = scanner2.nextLine();
                          if (!"".equals(phoneNumber))
                              contact.setPhoneNumber(phoneNumber);
                          break;
                  }
                  this.contacts.set(index - 1, contact);
                  System.out.println("The record updated!");
              }
      
              public String getContactNumber() {
                  int lastContactIndex = contacts.size() - 1;
                  Contact contact = this.contacts.get(lastContactIndex);
                  return contact.getPhoneNumber();
              }
      
              public int count() {
                  return this.contacts.size();
              }
      
              public void list() {
                  for (int i = 0; i < this.contacts.size(); i++) {
                      Contact contact = this.contacts.get(i);
                      String phoneNumber = !"".equals(contact.getPhoneNumber()) ? contact.getPhoneNumber() : "[no number]";
                      String contactInfo = "%s. %s %s, %s".formatted(i + 1, contact.getName(), contact.getSurname(), phoneNumber);
                      System.out.println(contactInfo);
                  }
              }
      
              public void exit() {
                  System.exit(0);
              }
          }
      }
    learner_created: false
  - name: test/ContactsTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.List;
      import java.util.function.Function;
      
      
      class TestClue {
      
          Function<String, CheckResult> callback;
      
          TestClue(Function<String, CheckResult> callback) {
              this.callback = callback;
          }
      }
      
      
      public class ContactsTest extends StageTest<TestClue> {
      
          private CheckResult splitActionsFeedback(int actualSize, String... actions) {
              if (actualSize != actions.length) {
                  return CheckResult.wrong(String.format("This test should contain %d actions: %s. " +
                                  "You should separate your actions with an empty line.",
                          actions.length,
                          String.join(", ", actions)));
              } else {
                  return null;
              }
          }
      
          @Override
          public List<TestCase<TestClue>> generate() {
              return List.of (
                  new TestCase<TestClue>()
                      .setInput("exit")
                      .setAttach(new TestClue(output -> {
                          output = output.strip().toLowerCase();
                          if (!output.contains("enter action")) {
                              return new CheckResult(false,
                                  "No \"Enter action\" substring found in the output");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "count\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          output = output.strip().toLowerCase();
                          if (!output.contains("0 records")) {
                              return new CheckResult(false,
                                  "No \"0 records\" substring found in the output. " +
                                          "If you already have the database, try to delete it.");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "count\n" +
                          "edit\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          output = output.strip().toLowerCase();
                          if (!output.contains("no records to edit")) {
                              return new CheckResult(false,
                                  "No \"No records to edit\" substring found in the output");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "count\n" +
                          "remove\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          output = output.strip().toLowerCase();
                          if (!output.contains("no records to remove")) {
                              return new CheckResult(false,
                                  "No \"No records to remove\" substring found in the output");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "add\n" +
                              "person\n" +
                              "John\n" +
                              "Smith\n" +
                              "\n" +
                              "\n" +
                              "123 456 789\n" +
                          "count\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          output = output.strip().toLowerCase();
                          if (output.contains("0 records")) {
                              return new CheckResult(false,
                                  "Can't add the person");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "add\n" +
                              "person\n" +
                              "John\n" +
                              "Smith\n" +
                              "\n" +
                              "\n" +
                              "123 456 789\n" +
                          "info\n" +
                              "1\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                          var feedback = splitActionsFeedback(blocks.length, "add", "info", "exit");
                          if (feedback != null) return feedback;
      
                          String infoBlock = blocks[1];
                          if (!infoBlock.contains("Name: John")) {
                              return new CheckResult(false,
                                      "User info doesn't contain the correct user name");
                          }
                          if (!infoBlock.contains("Surname: Smith")) {
                              return new CheckResult(false,
                                      "User info doesn't contain the correct user surname");
                          }
                          if (!infoBlock.contains("Birth date: [no data]")) {
                              return new CheckResult(false,
                                      "User info doesn't contain the correct birth date");
                          }
                          if (!infoBlock.contains("Gender: [no data]")) {
                              return new CheckResult(false,
                                      "User info doesn't contain the correct gender");
                          }
                          if (!infoBlock.contains("Number: 123 456 789")) {
                              return new CheckResult(false,
                                      "User info doesn't contain the correct phone number");
                          }
                          if (!infoBlock.contains("Time created:")) {
                              return new CheckResult(false,
                                      "User info doesn't contain the creation time");
                          }
                          if (!infoBlock.contains("Time last edit:")) {
                              return new CheckResult(false,
                                      "User info doesn't contain the last edit time");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "add\n" +
                              "organization\n" +
                              "Pizza Shop\n" +
                              "Wall St. 1\n" +
                              "+0 (123) 456-789-9999\n" +
                          "info\n" +
                              "1\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                          var feedback = splitActionsFeedback(blocks.length, "add", "info", "exit");
                          if (feedback != null) return feedback;
      
                          String infoBlock = blocks[1];
                          if (!infoBlock.contains("Organization name: Pizza Shop")) {
                              return new CheckResult(false,
                                      "Organization info doesn't contain the correct organization name");
                          }
                          if(!infoBlock.contains("Address: Wall St. 1")) {
                              return new CheckResult(false,
                                      "Organization info doesn't contain the correct address");
                          }
                          if(!infoBlock.contains("Number: +0 (123) 456-789-9999")) {
                              return new CheckResult(false,
                                      "Organization info doesn't contain the correct phone number");
                          }
                          if(!infoBlock.contains("Time created:")) {
                              return new CheckResult(false,
                                      "Organization info doesn't contain the creation time");
                          }
                          if(!infoBlock.contains("Time last edit:")) {
                              return new CheckResult(false,
                                  "Organization info doesn't contain the last edit time");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "add\n" +
                              "person\n" +
                              "John\n" +
                              "Smith\n" +
                              "\n" +
                              "\n" +
                              "123 456 789\n" +
                          "edit\n" +
                              "1\n" +
                              "gender\n" +
                              "M\n" +
                          "info\n" +
                              "1\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                          var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                          if (feedback != null) return feedback;
      
                          String infoBlock = blocks[2];
                          if (!infoBlock.contains("Name: John")
                              || !infoBlock.contains("Surname: Smith")
                              || !infoBlock.contains("Birth date: [no data]")
                              || !infoBlock.contains("Gender: M")
                              || !infoBlock.contains("Number: 123 456 789")
                              || !infoBlock.contains("Time created:")
                              || !infoBlock.contains("Time last edit:")) {
                              return new CheckResult(false,
                                  "Editing person gender is not working");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "add\n" +
                              "person\n" +
                              "John2\n" +
                              "Smith2\n" +
                              "\n" +
                              "\n" +
                              "123 456 789\n" +
                          "edit\n" +
                              "1\n" +
                              "name\n" +
                              "John3\n" +
                          "info\n" +
                              "1\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                          var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                          if (feedback != null) return feedback;
      
                          String infoBlock = blocks[2];
                          if (!infoBlock.contains("Name: John3")
                              || !infoBlock.contains("Surname: Smith2")
                              || !infoBlock.contains("Birth date: [no data]")
                              || !infoBlock.contains("Gender: [no data]")
                              || !infoBlock.contains("Number: 123 456 789")
                              || !infoBlock.contains("Time created:")
                              || !infoBlock.contains("Time last edit:")) {
                              return new CheckResult(false,
                                  "Editing person name is not working");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "add\n" +
                              "person\n" +
                              "John2\n" +
                              "Smith2\n" +
                              "\n" +
                              "\n" +
                              "123 456 789\n" +
                          "edit\n" +
                              "1\n" +
                              "number\n" +
                              "321 654 978\n" +
                          "info\n" +
                              "1\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                          var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                          if (feedback != null) return feedback;
      
                          String infoBlock = blocks[2];
                          if (!infoBlock.contains("Name: John2")
                              || !infoBlock.contains("Surname: Smith2")
                              || !infoBlock.contains("Birth date: [no data]")
                              || !infoBlock.contains("Gender: [no data]")
                              || !infoBlock.contains("Number: 321 654 978")
                              || !infoBlock.contains("Time created:")
                              || !infoBlock.contains("Time last edit:")) {
                              return new CheckResult(false,
                                  "Editing person number is not working");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "add\n" +
                              "organization\n" +
                              "Pizza Shop\n" +
                              "Wall St. 1\n" +
                              "+0 (123) 456-789-9999\n" +
                          "edit\n" +
                              "1\n" +
                              "address\n" +
                              "Wall St 2\n" +
                          "info\n" +
                              "1\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                          var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                          if (feedback != null) return feedback;
      
                          String infoBlock = blocks[2];
                          if (!infoBlock.contains("Organization name: Pizza Shop")
                              || !infoBlock.contains("Address: Wall St 2")
                              || !infoBlock.contains("Number: +0 (123) 456-789-9999")
                              || !infoBlock.contains("Time created:")
                              || !infoBlock.contains("Time last edit:")) {
                              return new CheckResult(false,
                                  "Editing organization address is not working");
                          }
                          return CheckResult.correct();
                      })),
      
                  new TestCase<TestClue>()
                      .setInput(
                          "add\n" +
                              "organization\n" +
                              "Pizza Shop\n" +
                              "Wall St. 1\n" +
                              "+0 (123) 456-789-9999\n" +
                          "edit\n" +
                              "1\n" +
                              "number\n" +
                              "+0 (123) 456-789-12345\n" +
                          "info\n" +
                              "1\n" +
                          "exit")
                      .setAttach(new TestClue(output -> {
                          String[] blocks = output.strip().split("(\\s*\\n\\s*){2,}");
                          var feedback = splitActionsFeedback(blocks.length, "add", "edit", "info", "exit");
                          if (feedback != null) return feedback;
      
                          String infoBlock = blocks[2];
                          if (!infoBlock.contains("Organization name: Pizza Shop")
                              || !infoBlock.contains("Address: Wall St. 1")
                              || !infoBlock.contains("Number: +0 (123) 456-789-12345")
                              || !infoBlock.contains("Time created:")
                              || !infoBlock.contains("Time last edit:")) {
                              return new CheckResult(false,
                                  "Editing organization number is not working");
                          }
                          return CheckResult.correct();
                      }))
              );
          }
      
          @Override
          public CheckResult check(String reply, TestClue clue) {
              try {
                  return clue.callback.apply(reply);
              }
              catch (Exception ex) {
                  return new CheckResult(false, "Can't check the answer");
              }
          }
      }
    learner_created: false
  - name: Upgrade Your Contacts Code
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/230/implement#comment
status: Solved
record: 2
